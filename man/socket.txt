SOCKET(2)                      System Calls Manual                     SOCKET(2)

NAME
     socket – create an endpoint for communication

SYNOPSIS
     #include <sys/socket.h>

     int
     socket(int domain, int type, int protocol);

DESCRIPTION
     socket() creates an endpoint for communication and returns a descriptor.
socket（）通信用のエンドポイントを作成し、記述子を返します。

The domain parameter specifies a communications domain within which communication will take place; this selects the protocol family which should be used.
Domainパラメータは、通信が行われる通信ドメインを指定します。これにより、使用する必要があるプロトコルファミリが選択されます。
These families are defined in the include file⟨sys/socket.h⟩.
これらのファミリは、IncludeFilešsys/socket.hōに定義されています。

The currently understood formats are
現在理解されているフォーマットはあります

           PF_LOCAL        Host-internal protocols, formerly called PF_UNIX,
           PF_UNIX         Host-internal protocols, deprecated, use PF_LOCAL,
           PF_INET         Internet version 4 protocols,
           PF_ROUTE        Internal Routing protocol,
           PF_KEY          Internal key-management function,
           PF_INET6        Internet version 6 protocols,
           PF_SYSTEM       System domain,
           PF_NDRV         Raw access to network device,
           PF_VSOCK        VM Sockets protocols

     The socket has the indicated type, which specifies the semantics of communication.  Currently defined types are:
ソケットには指示された型があり、これは通信の意味を指定します。現在定義されているタイプは次のとおりです。

           SOCK_STREAM
           SOCK_DGRAM
           SOCK_RAW

A SOCK_STREAM type provides sequenced, reliable, two-way connection based byte streams.
SOCK_STREAM型は、シーケンス、信頼性の高い、双方向接続ベースのバイトストリームを提供します。

An out-of-band data transmission mechanism may be supported.
帯域外データ伝送機構をサポートすることができる。

A SOCK_DGRAM socket supports datagrams (connectionless, unreliable messages of a fixed (typically small) maximum length).
SOCK_DGRAMソケットはデータグラム（固定（通常は小さい）最大長のコネクションレス、信頼性の低いメッセージをサポートします。

SOCK_RAW sockets provide access to internal network protocols and interfaces.
SOCK_RAWソケットは、内部ネットワークプロトコルとインタフェースへのアクセスを提供します。

The type SOCK_RAW, which is available only to the super-user.
SOCK_RAWタイプは、スーパーユーザーのみが利用可能です。

The protocol specifies a particular protocol to be used with the socket.
このプロトコルは、ソケットで使用される特定のプロトコルを指定します。

Normally only a single protocol exists to support a particular socket type within a given protocol family.
通常、特定のプロトコルファミリ内の特定のソケットタイプをサポートするための単一のプロトコルのみが存在します。

However, it is possible that many protocols may exist, in which case a particular protocol must be specified in this manner.
しかしながら、多くのプロトコルが存在し得る可能性があり、その場合に特定のプロトコルをこのように特定する必要がある。

The protocol number to use is particular to the “communication domain” in which communication is to take place;
使用するプロトコル番号は、通信が行われる「通信ドメイン」に特有のものです。
see protocols(5).

Sockets of type SOCK_STREAM are full-duplex byte streams, similar to pipes.
SOCK_STREAM型のソケットは、パイプと同様の全二重バイトストリームです。

A stream socket must be in a connected state before any data may be sent or received on it.
ストリームソケットは、データが送信または受信される前に接続状態にある必要があります。

A connection to another socket is created with a connect(2) or connectx(2) call.
別のソケットへの接続は、CONNECT（2）またはCONNECTX（2）呼び出しで作成されます。

Once connected, data may be transferred using read(2) and write(2) calls or some variant of the send(2) and recv(2) calls.
接続されると、データ（2）を使用してデータを転送し、（2）呼び出し（2）およびRECV（2）呼び出しの変形を書き込みます。

When a session has been completed a close(2) may be performed.
セッションが完了したら、（2）を実行することができる。

Out-of-band data may also be transmitted as described in send(2) and received as described in recv(2).
帯域外データはまた、送信（2）に記載されているように送信され、RECV（2）に記載されているように受信され得る。

The communications protocols used to implement a SOCK_STREAM insure that data is not lost or duplicated.
SOCK_STREAMを実装するために使用される通信プロトコルは、データが失われたり重複していないことを保証します。

If a piece of data for which the peer protocol has buffer space cannot be successfully transmitted within a reasonable length of time, then the connection is considered broken and calls will indicate an error with -1 returns and with ETIMEDOUT as the specific code in the global variable errno.
ピアプロトコルが妥当な時間内にバッファスペースを正常に送信できないデータの一部を正常に送信できない場合、接続は壊れており、コールはグローバル内の特定のコードとして-1のリターンとetimeDoutでエラーを示します。可変errno。

The protocols optionally keep sockets “warm” by forcing transmissions roughly every minute in the absence of other activity.
プロトコルは、他の活動がない場合に毎分毎分の送信を強制することによってソケット「暖かい」を保持します。

An error is then indicated if no response can be elicited on an otherwise idle connection for a extended period (e.g. 5 minutes).
その後、長期間のアイドル接続で応答がない場合は、エラーが表示されない場合（例えば5分）。

A SIGPIPE signal is raised if a process sends on a broken stream; this causes naive processes, which do not handle the signal, to exit.
プロセスが破損したストリームで送信されると、シグパイプ信号が発生します。これにより、シグナルを処理しないようにするナイーブプロセスが発生します。

SOCK_DGRAM and SOCK_RAW sockets allow sending of datagrams to correspondents named in send(2) calls.
SOCK_DGRAMとSOCK_RAWソケットを使用すると、送信（2）呼び出しで指定された対応関係へのデータグラムの送信が可能になります。

Datagrams are generally received with recvfrom(2), which returns the next datagram with its return address.
データグラムは一般にRECVFROM（2）で受信されます。これは、次のデータグラムを返信アドレスで返します。

An fcntl(2) call can be used to specify a process group to receive a SIGURG signal when the out-of-band data arrives.
帯域外データが到着したときにSigurg信号を受信するためのプロセスグループを指定するために、fcntl（2）呼び出しを使用することができる。

It may also enable non-blocking I/O and asynchronous notification of I/O events via SIGIO.
SIGIOを介したI / Oイベントの非ブロッキングI / Oおよび非同期通知も可能になる可能性があります。

The operation of sockets is controlled by socket level options.
ソケットの動作はソケットレベルのオプションによって制御されます。
These options are defined in the file ⟨sys/socket.h⟩. Setsockopt(2) and getsockopt(2) are used to set and get options, respectively.
これらのオプションは、ファイルのファイルΨsys/socket.hōで定義されています。setsockopt（2）とgetSockopt（2）は、それぞれオプションを設定して取得します。

RETURN VALUES
     A -1 is returned if an error occurs, otherwise the return value is a descriptor referencing the socket.
エラーが発生した場合、A -1が返され、そうでなければ戻り値はソケットを参照する記述子です。

ERRORS
     The socket() system call fails if:

     [EACCES]           Permission to create a socket of the specified type
                        and/or protocol is denied.

     [EAFNOSUPPORT]     The specified address family is not supported.

     [EMFILE]           The per-process descriptor table is full.

     [ENFILE]           The system file table is full.

     [ENOBUFS]          Insufficient buffer space is available.  The socket
                        cannot be created until sufficient resources are freed.

     [ENOMEM]           Insufficient memory was available to fulfill the
                        request.

     [EPROTONOSUPPORT]  The protocol type or the specified protocol is not
                        supported within this domain.

     [EPROTOTYPE]       The socket type is not supported by the protocol.

     If a new protocol family is defined, the socreate process is free to return
     any desired error code.  The socket() system call will pass this error code
     along (even if it is undefined).

LEGACY SYNOPSIS
     #include <sys/types.h>
     #include <sys/socket.h>

     The include file <sys/types.h> is necessary.

SEE ALSO
     accept(2), bind(2), connect(2), connectx(2), disconnectx(2),
     getsockname(2), getsockopt(2), ioctl(2), listen(2), read(2), recv(2),
     select(2), send(2), shutdown(2), socketpair(2), write(2), getprotoent(3),
     inet(4), inet6(4), unix(4), compat(5)

     An Introductory 4.3 BSD Interprocess Communication Tutorial, reprinted in
     UNIX Programmer's Supplementary Documents Volume 1.

     BSD Interprocess Communication Tutorial, reprinted in UNIX Programmer's
     Supplementary Documents Volume 1.

HISTORY
     The socket() function call appeared in 4.2BSD.

macOS 12.3                       March 18, 2015                       macOS 12.3
